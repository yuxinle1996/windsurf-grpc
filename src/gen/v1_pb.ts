// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file v1.proto (package aiserver.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message aiserver.v1.GetCurrentPeriodUsageRequest
 */
export class GetCurrentPeriodUsageRequest extends Message<GetCurrentPeriodUsageRequest> {
  constructor(data?: PartialMessage<GetCurrentPeriodUsageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.GetCurrentPeriodUsageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCurrentPeriodUsageRequest {
    return new GetCurrentPeriodUsageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCurrentPeriodUsageRequest {
    return new GetCurrentPeriodUsageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCurrentPeriodUsageRequest {
    return new GetCurrentPeriodUsageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCurrentPeriodUsageRequest | PlainMessage<GetCurrentPeriodUsageRequest> | undefined, b: GetCurrentPeriodUsageRequest | PlainMessage<GetCurrentPeriodUsageRequest> | undefined): boolean {
    return proto3.util.equals(GetCurrentPeriodUsageRequest, a, b);
  }
}

/**
 * @generated from message aiserver.v1.GetCurrentPeriodUsageResponse
 */
export class GetCurrentPeriodUsageResponse extends Message<GetCurrentPeriodUsageResponse> {
  /**
   * @generated from field: int64 billing_cycle_start = 1;
   */
  billingCycleStart = protoInt64.zero;

  /**
   * @generated from field: int64 billing_cycle_end = 2;
   */
  billingCycleEnd = protoInt64.zero;

  /**
   * @generated from field: aiserver.v1.PlanUsage plan_usage = 3;
   */
  planUsage?: PlanUsage;

  /**
   * @generated from field: aiserver.v1.SpendLimitUsage spend_limit_usage = 4;
   */
  spendLimitUsage?: SpendLimitUsage;

  /**
   * @generated from field: optional int32 display_threshold = 5;
   */
  displayThreshold?: number;

  /**
   * @generated from field: bool enabled = 6;
   */
  enabled = false;

  /**
   * @generated from field: string display_message = 7;
   */
  displayMessage = "";

  constructor(data?: PartialMessage<GetCurrentPeriodUsageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.GetCurrentPeriodUsageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "billing_cycle_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "billing_cycle_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "plan_usage", kind: "message", T: PlanUsage },
    { no: 4, name: "spend_limit_usage", kind: "message", T: SpendLimitUsage },
    { no: 5, name: "display_threshold", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 6, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "display_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCurrentPeriodUsageResponse {
    return new GetCurrentPeriodUsageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCurrentPeriodUsageResponse {
    return new GetCurrentPeriodUsageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCurrentPeriodUsageResponse {
    return new GetCurrentPeriodUsageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCurrentPeriodUsageResponse | PlainMessage<GetCurrentPeriodUsageResponse> | undefined, b: GetCurrentPeriodUsageResponse | PlainMessage<GetCurrentPeriodUsageResponse> | undefined): boolean {
    return proto3.util.equals(GetCurrentPeriodUsageResponse, a, b);
  }
}

/**
 * @generated from message aiserver.v1.PlanUsage
 */
export class PlanUsage extends Message<PlanUsage> {
  /**
   * @generated from field: int32 total_spend = 1;
   */
  totalSpend = 0;

  /**
   * @generated from field: int32 included_spend = 2;
   */
  includedSpend = 0;

  /**
   * @generated from field: int32 bonus_spend = 3;
   */
  bonusSpend = 0;

  /**
   * @generated from field: int32 remaining = 4;
   */
  remaining = 0;

  /**
   * @generated from field: int32 limit = 5;
   */
  limit = 0;

  /**
   * @generated from field: optional bool remaining_bonus = 6;
   */
  remainingBonus?: boolean;

  /**
   * @generated from field: optional string bonus_tooltip = 7;
   */
  bonusTooltip?: string;

  constructor(data?: PartialMessage<PlanUsage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.PlanUsage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_spend", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "included_spend", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "bonus_spend", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "remaining", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "remaining_bonus", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 7, name: "bonus_tooltip", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlanUsage {
    return new PlanUsage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlanUsage {
    return new PlanUsage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlanUsage {
    return new PlanUsage().fromJsonString(jsonString, options);
  }

  static equals(a: PlanUsage | PlainMessage<PlanUsage> | undefined, b: PlanUsage | PlainMessage<PlanUsage> | undefined): boolean {
    return proto3.util.equals(PlanUsage, a, b);
  }
}

/**
 * @generated from message aiserver.v1.SpendLimitUsage
 */
export class SpendLimitUsage extends Message<SpendLimitUsage> {
  /**
   * @generated from field: int32 total_spend = 1;
   */
  totalSpend = 0;

  /**
   * @generated from field: optional int32 pooled_limit = 2;
   */
  pooledLimit?: number;

  /**
   * @generated from field: optional int32 pooled_used = 3;
   */
  pooledUsed?: number;

  /**
   * @generated from field: optional int32 pooled_remaining = 4;
   */
  pooledRemaining?: number;

  /**
   * @generated from field: optional int32 individual_limit = 5;
   */
  individualLimit?: number;

  /**
   * @generated from field: int32 individual_used = 6;
   */
  individualUsed = 0;

  /**
   * @generated from field: int32 individual_remaining = 7;
   */
  individualRemaining = 0;

  /**
   * @generated from field: string limit_type = 8;
   */
  limitType = "";

  constructor(data?: PartialMessage<SpendLimitUsage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aiserver.v1.SpendLimitUsage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_spend", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "pooled_limit", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "pooled_used", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "pooled_remaining", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 5, name: "individual_limit", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 6, name: "individual_used", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "individual_remaining", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "limit_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpendLimitUsage {
    return new SpendLimitUsage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpendLimitUsage {
    return new SpendLimitUsage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpendLimitUsage {
    return new SpendLimitUsage().fromJsonString(jsonString, options);
  }

  static equals(a: SpendLimitUsage | PlainMessage<SpendLimitUsage> | undefined, b: SpendLimitUsage | PlainMessage<SpendLimitUsage> | undefined): boolean {
    return proto3.util.equals(SpendLimitUsage, a, b);
  }
}

